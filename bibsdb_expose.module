<?php
/**
 * @file
 * Code for the Bibsdb Masonry feature.
 */

include_once 'bibsdb_expose.features.inc';

/**
 * Implements hook_image_styles_alter().
 * 
 * @param $styles
 */
function bibsdb_expose_image_styles_alter(&$styles) {

if (function_exists('image_image_effect_info')) {
	  // Init the effect data.
	  $effects = image_image_effect_info();
	  $scale_effect = $effects['image_scale'];
	  $scale_effect['data'] = array();
	  $scale_effect['weight'] = 0;

	  // Store styles data.
	  $styles_data = array(
	    'media_thumbnail' => array(
	      'width' => 180,
	    ),
	  );

	  foreach ($styles_data as $style_name => $data) {
	    // Check that we only affect a default style.
	    if ($styles[$style_name]['storage'] == IMAGE_STORAGE_DEFAULT) {
	      $scale_effect['data'] = $data;
	      $styles[$style_name]['effects'] = array();
	      $styles[$style_name]['effects'][] = $scale_effect;
	    }
	  }
	}
}

function bibsdb_expose_node_presave($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // TITLE TAG
  // Append titletag to title. Applies to news and new_materails.
  if($node->type == 'ding_news' || $node->type == 'new_materials') {
    $tag = $wrapper->field_bibsdb_tag->value();
    $title = $wrapper->label();

    // Append tag if it has a value 
    if (!(empty($tag))) {
      $node->title = $tag . ": " . $title;
    }
    else {
      $node->title = $title;
    }
    
  }


    // BACKGROUND IMAGE
  if ('ding_news' == $node->type) {

      // Make entity matadata wrappers for node being saved and the original node
    $wrapper_original = entity_metadata_wrapper('node', $node->original);

      // Load field values of node being saved into variables
    $list_image = $wrapper->field_ding_news_list_image->value();
    $background_image = $wrapper->field_bibsdb_background_image->value();
    $background_image_xpos = $wrapper->field_bibsdb_bgimg_xpos->value();
    $background_image_ypos = $wrapper->field_bibsdb_bgimg_ypos->value();
    $list_image_height = $wrapper->field_bibsdb_listimg_height->value();
    $list_image_width = $wrapper->field_bibsdb_listimg_width->value();
    $vanilla_list_image = $wrapper->field_bibsdb_vanilla_list_image->value();

      // Continue if we have files attached to list_image and background_image
    if (isset($background_image) && isset($list_image)) {

        // If $vanilla_list_image is set we have an original node (edit)
        // If a new list image has been uploaded replace image in field_bibsdb_vanilla_list_image
      if (isset($vanilla_list_image)) {
        $list_image_original = $wrapper_original->field_ding_news_list_image->value();
        if (!($list_image_original[fid] == $list_image[fid])) {
          $file = file_load($list_image[fid]);
          $wrapper->field_bibsdb_vanilla_list_image->file->set($file);
        }
      }
        // If field_bibsdb_vanilla_list_image isn't set (add) save the fid of the current list image
      else {
        $file = file_load($list_image[fid]);
        $wrapper->field_bibsdb_vanilla_list_image->file->set($file);
      }

      $vanilla_list_image = $wrapper->field_bibsdb_vanilla_list_image->value();

        // Load list image object 
      $list_image_file = file_load($vanilla_list_image[fid]);
      $list_image_file_uri = $list_image_file->uri;
      $list_image_object = image_load($list_image_file_uri);

        //Load background image file of node being saved
      $background_image_file = file_load($background_image[fid]);
      $background_image_file_uri = $background_image_file->uri;

        // $node->original exists on node/edit - not on node/add
      if ($node->original) {

          // Load field values from the original node 
        $vanilla_list_image_original = $wrapper_original->field_bibsdb_vanilla_list_image->value();
        $background_image_original = $wrapper_original->field_bibsdb_background_image->value();
        $background_image_xpos_original = $wrapper_original->field_bibsdb_bgimg_xpos->value();
        $background_image_ypos_original = $wrapper_original->field_bibsdb_bgimg_ypos->value();

          // If none of the images or xpos or ypos have been tinked with exit here
        if (($background_image_original[fid] == $background_image[fid]) 
          && ($vanilla_list_image_original[fid] == $vanilla_list_image[fid]) 
          && ($background_image_xpos_original == $background_image_xpos) 
          && ($background_image_ypos_original == $background_image_ypos)) 
        {
          return;
        }
      }

        // LET THE IMAGE BUILDING BEGIN

        //Load background image file and do a scale and crop
      $background_image_file = file_load($background_image[fid]);
      $background_image_file_uri = $background_image_file->uri;
      $background_image_object = image_load($background_image_file_uri);
      image_scale_and_crop($background_image_object, 540, 405);
      image_save($background_image_object, $background_image_file_uri);
      
        // Load and modify image style
      $image_style = image_style_load('bibsdb_expose_large_bg', NULL, NULL);        

        // TODO This will break if additional effects are added that have identical keys in their data options
      $settings = array($background_image_file_uri, $background_image_xpos, $background_image_ypos, $list_image_height, $list_image_width);

      array_walk_recursive($image_style, function(&$item, $key, $settings){
        switch ($key) {
          case 'path':
          $item = $settings[0];
          break;
          case 'xpos':
          $item = $settings[1];
          break;
          case 'ypos':
          $item = $settings[2];
          break;
          case 'height':
          $item = $settings[3];
          break;
          case 'width':
          $item = $settings[4];
          break;
        }
      }, $settings);


        // Create uri for derived image by adding a subfolder to list image path e.g. public://list_image/news/img_with_underlay/124587/define_logo2.jpg
      $underlay_image_file_uri = "public://list_image/news/img_with_underlay/" . rand (10000, 30000) . $list_image_file->filename;

        // Create derived image and save on disk
      image_style_create_derivative($image_style, $list_image_file_uri, $underlay_image_file_uri);

        // Load derived image and save it as a drupal managed file
      $underlay_image_file_path = drupal_realpath($underlay_image_file_uri);
      $derivative_image_file = file_save_data(file_get_contents($underlay_image_file_path), $underlay_image_file_uri, FILE_EXISTS_REPLACE);
      
        // Then attach to node
      $wrapper->field_ding_news_list_image->file->set($derivative_image_file);    
    }
  }
}

/*
 * Public: Implements hook_node_prepare.
 * Act on a node object about to be shown on the add/edit form.
 * Strip titletag from title. Applies to news and new_materails.
 */
function bibsdb_expose_node_prepare($node) {
  if($node->type == 'ding_news' || $node->type == 'new_materials') {

    $wrapper = entity_metadata_wrapper('node', $node);

    // TITLE TAG
    $title = $wrapper->label();

    //Strip text in front of colon so it doesn't exist in the edit form
    $arr = explode(": ", $title);
    $title_contains_colon = strpos($title, ":");

    // Returns position (0 to count-1) if found - returns FALSE if not found
    if (!($title_contains_colon === FALSE)) {
      array_shift($arr);
      $title = implode($arr, ": ");
    }

    $node->title = $title;
  }
}

/*
 * Public: Implements hook_form_FORM_ID_alter.
 *
 * Move the 'field_bibsdb_brick_type' field to the 'options' fieldset.
 * Move the 'field_ding_news_category' field to the 'options' fieldset.
 */
function bibsdb_expose_form_node_form_alter(&$form, $form_state) {

  $type = $form['#node']->type;

  // MOVE PUBLISHING OPTIONS TO THE TOP OF THE VERTICAL TABS
  $form['options']['#weight'] = 0;

  // FACT BOX

	// Move bibsdb_fact_box_title and bibsdb_fact_box_body into group_ding_news_content
  if(isset($form['field_bibsdb_fact_box_title'])) {
    $form['#group_children']['field_bibsdb_fact_box_title'] = 'group_bibsdb_fact_box';
  }

  if(isset($form['field_bibsdb_fact_box_body'])) {
    $form['#group_children']['field_bibsdb_fact_box_body'] = 'group_bibsdb_fact_box';
  }

  // Move group group_bibsdb_fact_box into group_ding_news_content
  if(isset($form['#groups']['group_bibsdb_fact_box'])) {
    $form['#group_children']['group_bibsdb_fact_box'] = 'group_ding_news_content';
  }

  //BG IMAGE

  // Move field field_bibsdb_background_image into group_bibsdb_background_image
  if(isset($form['field_bibsdb_background_image'])) {
    $form['#group_children']['field_bibsdb_background_image'] = 'group_bibsdb_background_image';
  }

  // Move field field_bibsdb_bgimg_xpos into group_bibsdb_background_image
  if(isset($form['field_bibsdb_bgimg_xpos'])) {
    $form['#group_children']['field_bibsdb_bgimg_xpos'] = 'group_bibsdb_background_image';
  }

  // Move field field_bibsdb_bgimg_ypos into group_bibsdb_background_image
  if(isset($form['field_bibsdb_bgimg_ypos'])) {
    $form['#group_children']['field_bibsdb_bgimg_ypos'] = 'group_bibsdb_background_image';
  }

  // Move field field_bibsdb_listimg_height into group_bibsdb_background_image
  if(isset($form['field_bibsdb_listimg_height'])) {
    $form['#group_children']['field_bibsdb_listimg_height'] = 'group_bibsdb_background_image';
  }

   // Move field field_bibsdb_listimg_width into group_bibsdb_background_image
  if(isset($form['field_bibsdb_listimg_width'])) {
    $form['#group_children']['field_bibsdb_listimg_width'] = 'group_bibsdb_background_image';
  }

  // Move group group_bibsdb_background_image into group_ding_news_images
  if(isset($form['#groups']['group_bibsdb_background_image'])) {
    $form['#group_children']['group_bibsdb_background_image'] = 'group_ding_news_images';
  }

	// On ding_news hide some fields
  if ($type == 'ding_news') {
    $form['og_group_ref']['#access'] = FALSE;
    $form['field_ding_news_tags']['#access'] = FALSE;
    $form['field_bpi_workflow']['#access'] = FALSE;
    $form['field_bibsdb_vanilla_list_image']['#access'] = FALSE;
	}  
}

/*
 * Public: Implements hook_preprocess_ting_search_context_content.
 *
 * Before displaying the nodes in the carousel prepend event-titles with title tag.
 * Only needed for event-type because tag is already contained in titles of news and new materials.
 */
function bibsdb_expose_preprocess_ting_search_context_content(&$vars) {

  // TITLE TAG
  $node = $vars['node'];

  if ($node->type == 'ding_event') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $tag = $wrapper->field_bibsdb_tag->value();
    if (isset($tag)) {
      $vars['title'] = $tag . ": " . $node->title;
    }
  }
}


/**
 * Implements hook_entity_info().
 */
function bibsdb_expose_entity_info() {
  
  $info = array();
  
  $info['exposure'] = array(
    'label' => t('Exposure'),
    'controller class' => 'ExposureEntityController',
    'base table' => 'bibsdb_expose_exposures',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
    ),
    'entity class' => 'ExposureEntity',
    'controller class' => 'EntityAPIController',
    'access callback' => 'bibsdb_expose_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/exposures',
      'controller class' => 'EntityDefaultUIController',
    ),
    'fieldable' => TRUE,
    'bundles' => array(
      'exposure' => array(
        'label' => t('Exposure'),
        'admin' => array(
          'path' => 'admin/exposures',
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'bibsdb_expose',
  );
  
  return $info;
}



/**
 * Implements hook_menu()
 */
function bibsdb_expose_menu() {
  $items = array();
  
  $items['exposures'] = array(
    'title' => 'Our exposures bibsdb_expose',
    'page callback' => 'bibsdb_expose_exposures',
    'access arguments' => array('access content'),
  );
  
  $items['exposure/%'] = array(
    'title' => 'Exposure',
    'page callback' => 'bibsdb_expose_view_exposure',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  
  return $items;
}

/**
 * Access callback for exposure entities.
 */
function bibsdb_expose_access_callback($op, $exposure = NULL, $account = NULL) {
  if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Callback function for our exposure entities test path
 */
function bibsdb_expose_exposures() {
  
  
  $exposures = entity_load('exposure', array(1, 2, 3));
  
  // Saving new entities 
  if (!isset($exposures[3])) {
    $entity = entity_create('exposure', array('id' => 3));
    //$entity->name = t('Spring House');
    //$entity->description = t('Some more lipsum.');
    //$entity->deadline = '1397501132';
    $entity->save();
  }
  
  // Listing entities
  $list = entity_view('exposure', $exposures);
  
  $output = array();
  foreach ($list['exposure'] as $exposure) {
    $output[] = drupal_render($exposure);
  }
  
  return implode($output);

}

/**
 * Callback function for displaying the individual exposure page
 */
function bibsdb_expose_view_exposure($id) {
  
  $exposures = entity_load('exposure', array($id));
  $exposure = $exposures[$id];
  
  drupal_set_title($exposure->id);
  $output = entity_view('exposure', array($exposure));
  
  return $output;
  
}

/**
 * Form definition for adding / editing a exposure.
 */
function exposure_form($form, &$form_state, $exposure = NULL) { 
  
  field_attach_form('exposure', $exposure, $form, $form_state);
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($exposure->id) ? t('Update exposure') : t('Save exposure'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Submit handler for the exposure add/edit form.
 */
function exposure_form_submit($form, &$form_state) {
  $exposure = entity_ui_form_submit_build_entity($form, $form_state);
  $exposure->save();
  drupal_set_message(t('The exposure: @name has been saved.', array('@name' => $exposure->id)));
  $form_state['redirect'] = 'admin/exposures';
}

/**
 * Implements hook_entity_property_info().
 */
function bibsdb_expose_entity_property_info() {
  
  $info = array();
  
  $info['exposure']['properties']['id'] = array(
    'label' => t('Exposure ID'),
    'description' => t('The ID of the exposure.'),
    'type' => 'integer',
    'schema field' => 'id',
  );
  
  return $info;
}

  
/**
 * Exposure entity class extending the Entity class
 */
class ExposureEntity extends Entity {
  
  /**
   * Change the default URI from default/id to exposure/id
   */
  protected function defaultUri() {
    return array('path' => 'exposure/' . $this->identifier());
  }
  
}

/**
 * Implements hook_action_info().
 */
function bibsdb_expose_action_info() {
  return array(
    'bibsdb_expose_expose_content' => array(
      'type' => 'node',
      'label' => t('Expose content'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

function bibsdb_expose_expose_content_form($settings, &$form_state) {
  // Load brick type vocabulary
  $vocabulary = taxonomy_vocabulary_machine_name_load('bibsdb_brick_type');
  $tree = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);
  $brick_type_options = array();
  foreach ($tree as $term) {
    $brick_type_options[$term->tid] = $term->name;
  }

  $form = array();
  $form['brick_type'] = array(
    '#type' => 'select', 
    '#title' => t('Choose brick type'),
    '#options' => $brick_type_options,
    '#required' => TRUE,
  );
  return $form;
}

function bibsdb_expose_expose_content_submit($form, $form_state) {
  $return = array(); 
  $return['brick_type'] = $form_state['values']['brick_type'];
  return $return; //Note, return value here must be an array.
}

function bibsdb_expose_expose_content(&$node, $context) {

  $wall = $context['view_info']['arguments']['0'];
  $brick_type = $context['brick_type'];
  $brick_content = $node->nid;

  //$entity = entity_create('exposure', array('id' => 20));
  //$entity->field_bibsdb_wall = $wall;
  //$entity->field_bibsdb_brick_type = $brick_type;
  //$entity->field_bibsdb_brick_content = $brick_content;
  //$entity->save();

  $message = t('Node title is %title. Sincerely, %brick_type', array(
    '%title' => $node->title,
    '%brick_type' => arg(0),
  ));
  drupal_set_message($message);
}


/**
 * Extending the EntityAPIController for the Exposure entity.
 */
class ExposureEntityController extends EntityAPIController {

}