<?php
/**
 * @file
 * Code for the Bibsdb Masonry feature.
 */

include_once 'bibsdb_expose.features.inc';
// Load tag logic
include_once 'bibsdb_expose.tag.inc';
include_once 'bibsdb_expose.vbo.inc';

// Load code that generates list images with background effect.
include_once 'bibsdb_expose.bgimg.inc';

// Alterations to node add/edit form
include_once 'bibsdb_expose.admin.inc';


include_once 'bibsdb_expose.theme.inc';
include_once 'bibsdb_expose.field_formatter.inc';



/**
 * Implements hook_entity_info().
 */
function bibsdb_expose_entity_info() {

  $info = array();

  $info['exposure'] = array(
    'label' => t('Exposure'),
    'controller class' => 'EntityAPIController',
    'base table' => 'bibsdb_expose_exposures',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      ),
    'entity class' => 'ExposureEntity',
    'access callback' => 'bibsdb_expose_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/exposures',
      'controller class' => 'EntityDefaultUIController',
      ),
    'fieldable' => TRUE,
    'bundles' => array(
      'exposure' => array(
        'label' => t('Exposure'),
        'admin' => array(
          'path' => 'admin/structure/exposure/manage',
          'access arguments' => array('administer exposures'),
          ),
        ),
      ),
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'bibsdb_expose',
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => TRUE,
        ),
      ),
    );

  return $info;
}

/**
 * Implements hook_menu()
 */
function bibsdb_expose_menu() {
  $items = array();

  $items['admin/structure/exposure/manage'] = array(
    'title' => 'Exposure',
    'description' => 'Manage Exposure structure.',
    'page callback' => 'bibsdb_expose_exposures',
    'access arguments' => array('administer exposures'),
    'file' => 'bibsdb_expose.pages.inc',
    );

  $items['exposure/%'] = array(
    'title' => 'Exposure',
    'page callback' => 'bibsdb_expose_view_exposure',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'bibsdb_expose.pages.inc',
    );

  $items['bibsdb_open_platform_query/content/ajax'] = array(
    'title' => 'Fetch materials from open platform',
    'page callback' => 'bibsdb_expose_bibsdb_open_platform_query',
    'access arguments' => array('access content'),
    'file' => 'bibsdb_expose.pages.inc',
    'type' => MENU_CALLBACK,
    );

  return $items;
}

function bibsdb_expose_permission(){
  return array(
    'administer exposures' =>  array(
      'title' => t('Administer exposures'),
      'restrict access' => TRUE,
      ),
    );
}

/**
 * Access callback for exposure entities.
 */
function bibsdb_expose_access_callback($op, $exposure = NULL, $account = NULL) {
  if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Form definition for adding / editing a exposure.
 */
function exposure_form($form, &$form_state, $exposure = NULL) {

  field_attach_form('exposure', $exposure, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($exposure->id) ? t('Update exposure') : t('Save exposure'),
    '#weight' => 50,
    );

  return $form;
}

/**
 * Submit handler for the exposure add/edit form.
 */
function exposure_form_submit($form, &$form_state) {
  $exposure = entity_ui_form_submit_build_entity($form, $form_state);
  $exposure->save();
  drupal_set_message(t('The exposure: @name has been saved.', array('@name' => $exposure->id)));
  $form_state['redirect'] = 'admin/exposures';
}

/**
 * Implements hook_entity_property_info().
 */
function bibsdb_expose_entity_property_info() {

  $info = array();

  $info['exposure']['properties']['id'] = array(
    'label' => t('Exposure ID'),
    'description' => t('The ID of the exposure.'),
    'type' => 'integer',
    'schema field' => 'id',
    );

  return $info;
}

/**
 * Implements hook_theme().
 */
function bibsdb_expose_theme($existing, $type, $theme, $path) {
  return array(
    'exposure' => array(
      'variables' => array('content' => null),
      'template' => 'templates/exposure',
      //'file' => 'bibsdb_expose.theme.inc',
      ),
    'carousel' => array(
      'variables' => array('nid' => null, 'items' => null),
      'template' => 'carousel',
      'path' => drupal_get_path('module', 'bibsdb_expose') . '/templates',
      ),
    'carousel_item' => array(
      'variables' => array('content' => null),
      'template' => 'carousel-item',
      'path' => drupal_get_path('module', 'bibsdb_expose') . '/templates',
      ),
    'views_view_unformatted__bibsdb_wall' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'views-view-unformatted--bibsdb-wall',
      'original hook' => 'views_view_unformatted',
      'path' => drupal_get_path('module', 'bibsdb_expose') . '/templates',
      ),
    'bibsdb_expose_bibsdb_term_field_formatter' => array(
      'variables' => array('element' => NULL),
      ),
    'bibsdb_expose_bibsdb_wall_title_formatter'  => array(
      'variables' => array('element' => NULL),
      ),
    'bibsdb_expose_bibsdb_query_to_carousel_formatter'  => array(
      'variables' => array('element' => NULL),
      ),
    );
}

function bibsdb_expose_entity_view($entity, $type, $view_mode, $langcode) {
  if (!($type == 'exposure')) {
    return;
  }

  //Load the linked node
  $exposure_wrapper = entity_metadata_wrapper('exposure', $entity);
  $node_wrapper = $exposure_wrapper->field_bibsdb_brick_content;
  $node = $node_wrapper->value();
  $nodeprops = $node_wrapper->getPropertyInfo();

  //Load the brick type
  $term_wrapper = $exposure_wrapper->field_bibsdb_brick_type;
  $term_name = $term_wrapper->name->value();
  // The term name contains info 4 pieces of info separated by '-'
  // 0. piece: col number
  // 1. piece: The number of cols this element spans
  // 2. piece: The number of rows this element spans
  // 3. piece: The name of a brick design
  // 4. piece: The fields to be output
  // 5. piece: The name of the imagestyle to use


  $term_name_elements = explode('-', $term_name);

  // Extract the field list to be output
  $fieldlist = explode('x', $term_name_elements[4]);

  // Modify the col number so it doesn't start with a number
  $colnumber = explode('COL', array_shift($term_name_elements));
  $colclass = "col" . $colnumber[0] . " ";

  $lastchar = substr($term_name_elements[0], -1);



  // Add all the info from term-name as classes
  $entity->content['classes'] .= 'brick ';
  $entity->content['classes'] .= $colclass;
  $entity->content['classes'] .= strtolower(implode(' ', $term_name_elements));


  // Build the render array
  $entity->content['fields'] = array();
  $entity->content['fields']['wrapper'] = _build_container(array('wrapper'));

  foreach ($fieldlist as $fieldkey) {
    switch ($fieldkey) {
      case 'titlelink':
        // Build title div
      $entity->content['fields']['wrapper'][$fieldkey] = _build_container(array('title'));

        // Insert title link
      $entity->content['fields']['wrapper'][$fieldkey]['content'] = array(
        '#type'  => 'link',
        '#title' => _strip_tag($node->title),
        '#href'  => explode('#', _bibsdb_expose_build_url($node))[0],
        '#options' => array('fragment' => explode('#', _bibsdb_expose_build_url($node))[1]),
        );

      break;

      case 'title':
        // Build title div
      $entity->content['fields']['wrapper'][$fieldkey] = _build_container(array($fieldkey));

      $entity->content['fields']['wrapper'][$fieldkey]['content'] = array(
        '#type' => 'markup',
        '#markup' => _strip_tag($node->title),
        );

      break;

      case 'taglink':
        // Check that tag is not empty
      $arr = _build_field($node, $nodeprops, _get_field_selection_setting('tag'));


      if (!(empty($arr['#markup']))) {

        // Build tag div
        $entity->content['fields']['wrapper'][$fieldkey] = _build_container(array('tag'));

          // Insert tag link
        $entity->content['fields']['wrapper'][$fieldkey]['content'] = array(
          '#type'  => 'link',
          '#title' => $arr['#markup'],
          '#href'  => explode('#', _bibsdb_expose_build_url($node))[0],
          '#options' => array('fragment' => explode('#', _bibsdb_expose_build_url($node))[1]),
          );
      }
      break;



      case 'tag';
        // Check that tag is not empty
      $arr = _build_field($node, $nodeprops, _get_field_selection_setting($fieldkey));

      if (!(empty($arr['#markup']))) {

        // Build tag div
        $entity->content['fields']['wrapper'][$fieldkey] = _build_container(array($fieldkey));

        $entity->content['fields']['wrapper'][$fieldkey]['content'] = $arr;
      }

      break;

      case 'lead':

        // Check that tag is not empty
      $arr = _build_field($node, $nodeprops, _get_field_selection_setting($fieldkey));

      if (!(empty($arr['#markup']))) {

        // Build lead div
        $entity->content['fields']['wrapper'][$fieldkey] = _build_container(array($fieldkey));

        $entity->content['fields']['wrapper'][$fieldkey]['content'] = $arr;

      }
      break;

      case 'query':

      $items = _bibsdb_expose_open_platform_new_materials_search($node->nid, 0, 7);

      $carouselmarkup = array(
        '#type' => 'markup',
        '#markup' => theme('carousel', array('nid' => $node->nid, 'items' => $items)),
        );

      // Build div container
      $entity->content['fields']['wrapper'][$fieldkey] = _build_container(array($fieldkey));
      $entity->content['fields']['wrapper'][$fieldkey]['content'] = $carouselmarkup;

      break;

      case 'img':

      $arr = _build_field($node, $nodeprops, _get_field_selection_setting($fieldkey));

      // Turn img into a link
      if (isset($arr['#path']['path'])) {
        $arr['#path']['path'] = explode('#', _bibsdb_expose_build_url($node))[0];
        $arr['#path']['options'] = array('fragment' => explode('#', _bibsdb_expose_build_url($node))[1]);
      }

      $arr['#image_style'] = $term_name_elements[4];

      $entity->content['fields'][$fieldkey]['content'] = $arr;
      break;

      case 'bgimg':
      $arr = _build_field($node, $nodeprops, _get_field_selection_setting('img'));

      $img_url = image_style_url($term_name_elements[4], $arr['#item']['uri']);

      // Insert img link
      $entity->content['fields'][$fieldkey]['content'] = array(
        '#type'  => 'link',
        '#title' => render($entity->content['fields']['wrapper']),
        '#href'  => explode('#', _bibsdb_expose_build_url($node))[0],
        '#attributes' => array(
          'style' => 'background-image: url(' . $img_url .')',
          ),
        '#options' => array(
          'html' => true,
          'fragment' => explode('#', _bibsdb_expose_build_url($node))[1],
          ),
        );

      unset($entity->content['fields']['wrapper']);
      break;
    }
  }

}


/**
 * Exposure entity class extending the Entity class
 */
class ExposureEntity extends Entity {

  /**
   * Change the default URI from default/id to exposure/id
   */
  protected function defaultUri() {
    return array('path' => 'exposure/' . $this->identifier());
  }

}

/**
*  This is a config-array that helps us select the same fields in different content type
*  This is nessecary because the fields are named differently in the content types
*/

function _get_field_selection_setting($fieldkey) {
  $field_selection_settings = array(
    'tag' => array(
      'prefix' => array('field_bibsdb'),
      'suffix' => array('tag'),
      'options' => array(),
      ),
    'lead' => array(
      'prefix' => array('field_ding', 'field_bibsdb'),
      'suffix' => array('lead'),
      'options' => array(),
      ),
    'query' => array(
      'prefix' => array('field_ting'),
      'suffix' => array('new_materials_search'),
      'options' => array(
        'type' => 'bibsdb_query_to_carousel_formatter',
        ),
      ),
    'img' => array(
      'prefix' => array('field_ding', 'field_bibsdb','field_search_context'),
      'suffix' => array('list_image', 'new_materials_image'),
      'options' => array(
        'type' => 'image',
        'settings' => array(
          'image_style' => $term_name_elements[4],
          'image_link' => 'content',
          ),
        ),
      ),
    'link' => array(
      'prefix' => array('field_ding', 'field_bibsdb'),
      'suffix' => array('link', 'ref'),
      'options' => array(
        'settings' => array(
          'link' => TRUE,
          ),
        ),
      ),
    );

  return $field_selection_settings[$fieldkey];

}


/**
* Helper function that finds a specifik field in an node based on what the maschine field name starts and ends with.
* The field is then output as a rendarable array.
* Todo: Only works for single value fields.
*/
function _build_field($node, $nodeprops, $field_settings) {
  $delta=0;

  foreach ($nodeprops as $nodepropskey => $nodepropsvalue) {
    foreach ($field_settings['prefix'] as $prefixvalue) {
      foreach ($field_settings['suffix'] as $suffixvalue) {
        if (_starts_with($nodepropskey, $prefixvalue) && _ends_with($nodepropskey, $suffixvalue)){

          $field = field_get_items('node', $node, $nodepropskey);
          // If we are about to shaow an image set the image style
          return field_view_value('node', $node, $nodepropskey, $field[$delta], $field_settings['options']);
        }
      }
    }
  }
  return array();
}

/**
* Helper function to build a render array div container.
*/
function _build_container($classes) {
 return array(
  '#type' => 'container',
  '#attributes' => array(
    'class' => $classes,
    ),
  );
}



/**
* Helper function to determine if a string starts with another string.
*/
function _starts_with($haystack, $needle) {
  // search backwards starting from haystack length characters from the end
  return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== false;
}

/**
* Helper function to determine if a string ends with another string.
*/
function _ends_with($haystack, $needle) {
  // search forward starting from end minus needle length characters
  return $needle === "" || (($temp = strlen($haystack) - strlen($needle)) >= 0 && strpos($haystack, $needle, $temp) !== false);
}

/**
* Helper function to strip the tag from the title.
*/
function _strip_tag($title) {

  //Strip text in front of colon
  $arr = explode(": ", $title);

  // Returns position (0 to count-1) if found - returns FALSE if not found
  $title_contains_colon = strpos($title, ":");

  if (!($title_contains_colon === FALSE)) {
    array_shift($arr);
    $title = implode($arr, ": ");
  }

  return $title;
}




/**
 * Implements hook_action_info().
 */
function bibsdb_expose_action_info() {
  return array(
    'bibsdb_expose_vbo_expose' => array(
      'type' => 'node',
      'label' => t('Expose content'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      ),
    'bibsdb_expose_vbo_change_brick_type' => array(
      'type' => 'exposure',
      'label' => t('Change brick type'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      ),
    'bibsdb_expose_vbo_unexpose' => array(
      'type' => 'exposure',
      'label' => t('Unexpose content'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      ),
    );
}



function _bibsdb_expose_build_url($node) {
  if ($node->type == 'ding_search_context_link') {
    if (module_exists('bibsdb_search_context')) {
      // Update the search context link from internal or external link field
      _fill_search_context_link($node, TRUE);
      
      $wrapper = entity_metadata_wrapper('node', $node);

      $url = $wrapper->field_search_context_link->value()['url'];

      // One of the main usecases for ding_search_context_links is to link to
      // search queries. Search queries are tricky because they are a mix of
      // escaped and not escaped characters. This code handles it in a primitive
      // fashion by only escaping the quotes.
      //
      // Quotes inside search queries need to be escaped.
      $url = str_replace('"', '%22', $url);

      // Only add Webtrends tracking params to internal links.
      if (_bibsdb_expose_url_is_internal($url)) {
        if (strpos($url, '?') === FALSE) {
          $url .= '';
        }
        else {
          $url .= '';
        }
      }
    }

  }
  else {
    $url = url('node/' . $node->nid, array('absolute' => TRUE));
  }
  return $url;

}

/**
 * Helper function to determine if a link is internal.
 *
 * Accounting for absolute internal links.
 */
function _bibsdb_expose_url_is_internal($url) {
  $result = TRUE;

  if (url_is_external($url)) {
    // Still might be an internal absolute URL.
    $parsed_url = parse_url($url);
    if ($parsed_url['host'] !== $_SERVER['HTTP_HOST']) {
      $result = FALSE;
    }
  }

  return $result;
}

/**
 * Wrapper function that adds the modules JavaScript.
 */
function _bibsdb_expose_add_javascript() {

  // Ad our own JS to control and setup masonry.
  $module_path = drupal_get_path('module', 'bibsdb_expose');
  drupal_add_js($module_path . '/scripts/wall.masonry.options.js');
  drupal_add_js($module_path . '/scripts/bibsdb_expose.js');
  drupal_add_js($module_path . '/scripts/bibsdb_slick.js');

}



/**
 * Wrapper function that adds the modules css.
 */
function _bibsdb_expose_add_css() {
  $path = drupal_get_path('module', 'bibsdb_expose');
  drupal_add_css($path . '/sass_css/bibsdb_expose.css');

   // Add the slick library files
  if ($library_path = libraries_get_path('slick')) {

    $library_path .= '';
    $options = array('group' => JS_LIBRARY);
   
    drupal_add_css($library_path . '/slick-theme.css');
  }
}

/**
 * Private: bibsdb_expose_open_platform_search.
 */
function _bibsdb_expose_open_platform_new_materials_search($nid, $offset, $length = 16) {

  $new_materials_arr = array();
  $slice = array();

  // Clear the cache for this nid. Enable when debugging.
  //cache_clear_all("new_materials_search_".$nid, "cache", $wildcard = TRUE);
  bibsdb_open_platform_get_token();


  // Get cached carousel content
  $cache = cache_get('new_materials_search_'.$nid, 'cache');

  if (isset($cache->data)) {
    $new_materials_arr = $cache->data;
  }
  // Is it relevant for this query? Is content count larger that the requested offset?
  // If yes return $length items starting from offset-index
  if (count($new_materials_arr) > $offset) {
    // Yes, we have relevant cached carousel content.
    $slice = array_slice($new_materials_arr, $offset, $length);
    return $slice;
  }
  // No, we have no relevant cached content. We have to query the open platform.
  $wrapper = entity_metadata_wrapper('node', $nid);
  // Extract the query from the node
  $query = $wrapper->field_ting_new_materials_search->value();

  // Query the open platform with the offset
  $results = bibsdb_open_platform_search($query, $offset);

  foreach ($results->data as $data) {
    // Skip materials without cover
    $ac_identifier = $data->acIdentifier;
    $id_arr = explode("|", $ac_identifier[0]);

    $item_info = array(
      'local_id' => "870970-basis:" . $id_arr[0], //Bad fix. Open Platform doesn't return the full id.
      'owner_id' => $id_arr[1],
      'title' => $data->title[0],
      'author' => $data->creator[0],
      'ting_object_url' => "/ting/object/" . $id_arr[1] . ":" . $id_arr[0],
      'image_style' => 'ding_list_small'

      );

    // Add the local cover url to $item_info
    $item_info['local_cover_url'] = _bibsdb_expose_get_cover_url($item_info);

    array_push($new_materials_arr, theme('carousel_item', array('content' => $item_info)));
    
  }
  // Append fetched items to the existing cached items for this node
  cache_set('new_materials_search_'.$nid, $new_materials_arr, 'cache', CACHE_PERMANENT);
  // return $length items starting from offset-index
  $slice = array_slice($new_materials_arr, $offset, $length);

  return $slice;
}

/**
 * Private: Fetch the covers for the materials in the result
 * If no cover existsts skip the material
 */
function _bibsdb_expose_get_cover_url($item_info) {
  $url = NULL;
  // Use ting_covers_get to fetch covers
  $path = ting_covers_get(array($item_info['local_id']));

  if (isset($path[$item_info['local_id']])) {
    // If we we already have a valid cover image w/o style then just use it.
    $url = image_style_url($item_info['image_style'], $path[$item_info['local_id']]);
  }

  // If we we already have a valid cover image w/o style then just use it.
  return $url;
}
